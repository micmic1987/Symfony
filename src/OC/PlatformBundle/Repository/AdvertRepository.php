<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
  public function myFind($id)
  {
    $qb = $this->createQueryBuilder('a');
    $qb->where('a.id = :id')
      ->setParameter('id', $id);
    $this->whereCurrentYear($qb);
    return $qb->getQuery()->getSingleResult();
  }

  public function myFindDql($id)
  {
    $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a WHERE a.id = :id');
    $query->setParameter('id', $id);

    return $query->getSingleResult();
  }

  public function whereCurrentYear(QueryBuilder $qb)
  {
    $qb
    ->andWhere('a.date BETWEEN :start AND :end')
    ->setParameter('start', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
    ->setParameter('end',   new \Datetime(date('Y').'-12-31'))  // Et le 31 décembre de cette année
    ;
  }

  public function getAdvertWithApplications()
  {
    $qb = $this->createQueryBuilder('a');
    /*$qb->leftJoin('a.applications', 'app')
      ->addSelect('app');*/
    return $qb->getQuery()->getSingleResult();
  }

  public function getAdvertWithAll($id)
  {
    $qb = $this->createQueryBuilder('a')
      ->innerJoin('a.applications', 'app', 'WITH', 'app.date >= a.date')
      ->innerJoin('a.image', 'im')
      ->innerJoin('a.categories', 'ca')
      ->innerJoin('a.advertSkills', 'adsk')
      ->innerJoin('adsk.skill', 'skil')
      ->addSelect('app')
      ->addSelect('im')
      ->addSelect('ca')
      ->addSelect('adsk')
      ->addSelect('skil')
      ->where('a.id = :id')
      ->setParameter('id', $id);

    return $qb->getQuery()->getSingleResult();
  }

  public function getAdvertWithAllDql($id)
  {
    $query = $this->_em->createQuery('SELECT a, app, im, ca, adsk, sk
      FROM OCPlatformBundle:Advert a
      JOIN a.applications app
      JOIN a.image im
      JOIN a.categories ca
      JOIN a.advertSkills adsk
      JOIN adsk.skill sk
      WHERE a.id = :id')
      ->setParameter('id', $id);

    return $query->getSingleResult();
  }

  public function getAdvertWithCategories(array $categoryNames)
  {
    $qb = $this->createQueryBuilder('a');
    $qb->innerJoin('a.categories', 'cat')
      ->where('cat.name IN (:categoryNames)')
      ->andWhere('a.id = :id')
      ->setParameter('categoryNames', $categoryNames)
      ->setParameter('id', 2);
    //$qb->setFirstResult(1)->setMaxReults(1);
    return $qb->getQuery()->getSingleResult();
  }

  public function getAdverts($page, $nbPerPage)
  {
    $query = $this->createQueryBuilder('a')
     ->leftJoin('a.image', 'i')
     ->addSelect('i')
     ->leftJoin('a.categories', 'c')
     ->addSelect('c')
     //->orderBy('a.date', 'DESC')//->getQuery()
     ->setFirstResult(($page-1) * $nbPerPage)
     ->setMaxResults($nbPerPage)
    ;

    //return $query->getQuery()->getResult();
    return new Paginator($query, true);
  }

  public function getOldAdverts(\Datetime $date)
  {
    $qb = $this->createQueryBuilder('a');
    $qb->leftJoin('a.applications', 'app')
      ->where('app.id is null')
      ->andWhere('a.date < :date')
      ->setParameter('date', $date)
    ;
    return $qb->getQuery()->getResult();
  }

  public function isFlood($ip, $seconds)
  {
    $dateInPast = new \Datetime();
    $dateInPast->sub(new \DateInterval('PT'.$seconds.'S'));

    $qb = $this->createQueryBuilder('a');
    $qb
      ->select('a.date')
      ->where('a.ip = :ip')
      ->orderBy('a.id', 'DESC')
      ->setMaxResults(1)
      ->setParameter('ip', $ip)
    ;
    $dateLastInsertByIp = $qb->getQuery()->getOneOrNullResult();
    $dateLastInsertByIp = $dateLastInsertByIp['date'];

    if($dateLastInsertByIp > $dateInPast) {
      return true;
    } else {
      return false;
    }

  }

}
